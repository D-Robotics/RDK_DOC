"use strict";(self.webpackChunkrdk_doc=self.webpackChunkrdk_doc||[]).push([[4834],{90244:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>t,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var d=i(74848),o=i(28453);const s={sidebar_position:1},a="3.2.1 RDK X3 Series Audio Board User Guide",r={id:"Basic_Application/audio/audio_board_x3",title:"3.2.1 RDK X3 Series Audio Board User Guide",description:"Video//www.bilibili.com/video/BV1rm4y1E73q/?p=10",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/03_Basic_Application/02_audio/audio_board_x3.md",sourceDirName:"03_Basic_Application/02_audio",slug:"/Basic_Application/audio/audio_board_x3",permalink:"/rdk_doc/en/Basic_Application/audio/audio_board_x3",draft:!1,unlisted:!1,editUrl:"https://github.com/D-Robotics/rdk_doc/blob/main/docs/03_Basic_Application/02_audio/audio_board_x3.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"3.1.2 Using USB Camera",permalink:"/rdk_doc/en/Basic_Application/Image/usb_camera"},next:{title:"3.2.2 RDK X3 Module\u97f3\u9891\u677f\u4f7f\u7528\u6307\u5357",permalink:"/rdk_doc/en/Basic_Application/audio/audio_board_x3_md"}},t={},c=[{value:"Audio Driver HAT REV2",id:"audio-driver-hat-rev2",level:2},{value:"Product Introduction",id:"product-introduction",level:3},{value:"Installation Method",id:"installation-method",level:3},{value:"Uninstallation Method",id:"uninstallation-method",level:3},{value:"Audio Nodes",id:"audio-nodes",level:3},{value:"Recording and Playback Test",id:"recording-and-playback-test",level:3},{value:"Audio Reacquisition Test",id:"audio-reacquisition-test",level:3},{value:"Notes",id:"notes",level:3},{value:"WM8960 Audio HAT",id:"wm8960-audio-hat",level:2},{value:"Product Introduction",id:"product-introduction-1",level:3},{value:"Installation Method",id:"installation-method-1",level:3},{value:"Uninstalling Method",id:"uninstalling-method",level:3},{value:"Audio Nodes",id:"audio-nodes-1",level:3},{value:"Recording and Playback Test",id:"recording-and-playback-test-1",level:3},{value:"Coexistence of Audio Subboard and USB Sound Card",id:"coexistence-of-audio-subboard-and-usb-sound-card",level:2}];function l(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.h1,{id:"321-rdk-x3-series-audio-board-user-guide",children:"3.2.1 RDK X3 Series Audio Board User Guide"}),"\n",(0,d.jsxs)(n.p,{children:["Video: ",(0,d.jsx)(n.a,{href:"https://www.bilibili.com/video/BV1rm4y1E73q/?p=10",children:"https://www.bilibili.com/video/BV1rm4y1E73q/?p=10"})]}),"\n",(0,d.jsxs)(n.p,{children:["The RDK X3 currently supports two types of audio adapter boards, the ",(0,d.jsx)(n.strong,{children:"Audio Driver HAT"})," and the ",(0,d.jsx)(n.strong,{children:"WM8960 Audio HAT"}),", designed to meet the functional needs of various voice scenarios. Below is a detailed introduction to the usage of these two audio boards."]}),"\n",(0,d.jsx)(n.admonition,{title:"TIP",type:"note",children:(0,d.jsxs)(n.p,{children:["If after installing the drivers, you get a message that the Miniboot version is not the latest, please go to ",(0,d.jsx)(n.code,{children:"1 System Options"})," -> ",(0,d.jsx)(n.code,{children:"S7 Update Miniboot"})," to update Miniboot."]})}),"\n",(0,d.jsx)(n.h2,{id:"audio-driver-hat-rev2",children:"Audio Driver HAT REV2"}),"\n",(0,d.jsx)(n.h3,{id:"product-introduction",children:"Product Introduction"}),"\n",(0,d.jsx)(n.p,{children:"The Audio Driver HAT REV2 is an audio adapter board produced by Waveshare Electronics, featuring an ES7210+ES8156 dual Codec scheme. It enables circular 4-microphone recording, dual-channel audio playback, and audio signal reacquisition. Below is an image of the adapter board:"}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.img,{alt:"image-audio-driver-hat",src:i(46564).A+"",width:"425",height:"371"})}),"\n",(0,d.jsxs)(n.p,{children:["For a detailed introduction to the audio sub-board, please refer to ",(0,d.jsx)(n.a,{href:"https://www.waveshare.net/shop/Audio-Driver-HAT.htm",children:"Audio Driver HAT"}),"."]}),"\n",(0,d.jsx)(n.h3,{id:"installation-method",children:"Installation Method"}),"\n",(0,d.jsxs)(n.ol,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["Connect the adapter board to the RDK X3's 40pin header as shown in the image below:",(0,d.jsx)(n.br,{}),"\n",(0,d.jsx)(n.img,{alt:"image-audio-driver-hat-setup",src:i(8260).A+"",width:"425",height:"289"})]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["Use the command ",(0,d.jsx)(n.code,{children:"cat /sys/class/socinfo/som_name"})," to query the type of development board and set the dip switch status of the audio sub-board according to the return value."]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["If the return value is 5 or 6, set all three dip switches to the ",(0,d.jsx)(n.code,{children:"ON"})," position."]}),"\n",(0,d.jsxs)(n.li,{children:["If the return value is 8, set all three dip switches to the ",(0,d.jsx)(n.code,{children:"OFF"})," position."]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["Use ",(0,d.jsx)(n.code,{children:"srpi-config"})," to configure the audio board",(0,d.jsx)(n.br,{}),"\n","Go to ",(0,d.jsx)(n.code,{children:"3 Interface Options"})," -> ",(0,d.jsx)(n.code,{children:"I5 Audio"}),(0,d.jsx)(n.br,{}),"\n","Select ",(0,d.jsx)(n.code,{children:"Audio Driver HAT V2"}),":\n",(0,d.jsx)(n.img,{alt:"image-audio-driver-hat-config00",src:i(1549).A+"",width:"1179",height:"419"})]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["Run the command ",(0,d.jsx)(n.code,{children:"sync && reboot"})," to reboot the development board. If the following device nodes appear under /dev/snd, the adapter board has been successfully installed."]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-shell",children:"root@ubuntu:/userdata# ls /dev/snd\nby-path  controlC0  pcmC0D0c  pcmC0D1p  timer\n"})}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.h3,{id:"uninstallation-method",children:"Uninstallation Method"}),"\n",(0,d.jsxs)(n.ol,{children:["\n",(0,d.jsxs)(n.li,{children:["Use ",(0,d.jsx)(n.code,{children:"srpi-config"})," to configure the audio board",(0,d.jsx)(n.br,{}),"\n","Go to ",(0,d.jsx)(n.code,{children:"3 Interface Options"})," -> ",(0,d.jsx)(n.code,{children:"I5 Audio"}),(0,d.jsx)(n.br,{}),"\n","Select ",(0,d.jsx)(n.code,{children:"UNSET"})," to uninstall the audio drivers and related configurations."]}),"\n"]}),"\n",(0,d.jsx)(n.h3,{id:"audio-nodes",children:"Audio Nodes"}),"\n",(0,d.jsxs)(n.p,{children:["On the ",(0,d.jsx)(n.code,{children:"RDK X3"}),", the playback node for this audio board is ",(0,d.jsx)(n.code,{children:"pcmC0D0p"}),", and the recording node is ",(0,d.jsx)(n.code,{children:"pcmC0D1c"}),"."]}),"\n",(0,d.jsx)(n.h3,{id:"recording-and-playback-test",children:"Recording and Playback Test"}),"\n",(0,d.jsxs)(n.p,{children:["Tests use the ",(0,d.jsx)(n.code,{children:"tinyalsa"})," library toolkit: ",(0,d.jsx)(n.code,{children:"tinycap"})," for recording and ",(0,d.jsx)(n.code,{children:"tinyplay"})," for playback."]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"tinycap"})," usage instructions:"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-shell",children:"tinycap\nUsage: tinycap {file.wav | --} [-D card] [-d device] [-c channels] [-r rate] [-b bits] [-p period_size] [-n n_periods] [-t time_in_seconds]\n\nUse -- for filename to send raw PCM to stdout\n"})}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"tinyplay"}),"usage instructions:"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-shell",children:"tinyplay\nusage: tinyplay file.wav [options]\noptions:\n-D | --card   <card number>    The device to receive the audio\n-d | --device <device number>  The card to receive the audio\n-p | --period-size <size>      The size of the PCM's period\n-n | --period-count <count>    The number of PCM periods\n-i | --file-type <file-type >  The type of file to read (raw or wav)\n-c | --channels <count>        The amount of channels per frame\n-r | --rate <rate>             The amount of frames per second\n-b | --bits <bit-count>        The number of bits in one sample\n-M | --mmap                    Use memory mapped IO to play audio\n"})}),"\n",(0,d.jsxs)(n.p,{children:["For more information about the tinyalsa library, please refer to their repository.",(0,d.jsx)(n.a,{href:"https://github.com/tinyalsa/tinyalsa",children:"\u4ed3\u5e93\u5730\u5740"})]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"2-channel microphone recording:"}),"\n"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:"tinycap ./2chn_test.wav -D 0 -d 1 -c 2 -b 16 -r 48000 -p 512 -n 4 -t 5\n"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"4-channel microphone recording:"}),"\n"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:"tinycap ./4chn_test.wav -D 0 -d 1 -c 4 -b 16 -r 48000 -p 512 -n 4 -t 5\n"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Dual-channel audio playback:"}),"\n"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:"tinyplay ./2chn_test.wav -D 0 -d 0\n"})}),"\n",(0,d.jsx)(n.h3,{id:"audio-reacquisition-test",children:"Audio Reacquisition Test"}),"\n",(0,d.jsx)(n.p,{children:"The audio board uses recording channels 7 & 8 for playback reacquisition, thus requiring the use of an 8-channel recording command for collection."}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Start 8-channel microphone recording"}),"\n"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-shell",children:"tinycap ./8chn_test.wav -D 0 -d 1 -c 8 -b 16 -r 48000 -p 512 -n 4 -t 5\n"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Start dual-channel audio playback"}),"\n"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:"tinyplay ./2chn_test.wav -D 0 -d 0\n"})}),"\n",(0,d.jsxs)(n.p,{children:["After recording, the spectral information of channels 7 & 8 in the ",(0,d.jsx)(n.code,{children:"2chn_test"}),".wav file can be viewed using audio software."]}),"\n",(0,d.jsx)(n.h3,{id:"notes",children:"Notes"}),"\n",(0,d.jsx)(n.p,{children:"Since the older Audio Driver HAT REV1 audio board has been discontinued, RDK X3 will gradually cease maintenance of this hardware. Users are recommended to upgrade to the REV2 version."}),"\n",(0,d.jsx)(n.p,{children:"For instructions on using the Audio Driver HAT REV1 audio board, refer to the FAQ section."}),"\n",(0,d.jsx)(n.h2,{id:"wm8960-audio-hat",children:"WM8960 Audio HAT"}),"\n",(0,d.jsx)(n.h3,{id:"product-introduction-1",children:"Product Introduction"}),"\n",(0,d.jsx)(n.p,{children:"WM8960 Audio HAT is an audio adapter board produced by Waveshare, using the WM8960 Codec solution, and can achieve dual channel microphone recording and audio playback functions. The appearance of the adapter board is as shown in the figure below:"}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.img,{alt:"image-audio-wm8960",src:i(79745).A+"",width:"390",height:"247"})}),"\n",(0,d.jsx)(n.p,{children:"This audio sub-board is only compatible with RDK X3 version 2.0, and the version number can be queried as follows. The return value 8 indicates that the device is 2.0 version."}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-shell",children:"root@ubuntu:/userdata# cat /sys/class/socinfo/som_name\n8\n"})}),"\n",(0,d.jsxs)(n.p,{children:["For a detailed introduction to the audio adapter board, please refer to ",(0,d.jsx)(n.a,{href:"https://www.waveshare.net/wiki/WM8960_Audio_HAT",children:"WM8960 Audio HAT"}),"."]}),"\n",(0,d.jsx)(n.h3,{id:"installation-method-1",children:"Installation Method"}),"\n",(0,d.jsxs)(n.ol,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["Connect the adapter board to the 40-pin header of RDK X3 as shown in the following picture",(0,d.jsx)(n.br,{}),"\n",(0,d.jsx)(n.img,{alt:"image-wm8960-audio-hat-setup",src:i(70363).A+"",width:"425",height:"266"})]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["Configure the audio board using ",(0,d.jsx)(n.code,{children:"srpi-config"}),(0,d.jsx)(n.br,{}),"\n","Enter ",(0,d.jsx)(n.code,{children:"3 Interface Options"})," -> ",(0,d.jsx)(n.code,{children:"I5 Audio"}),(0,d.jsx)(n.br,{}),"\n","Select ",(0,d.jsx)(n.code,{children:"WM8960 Audio HAT"}),":\n",(0,d.jsx)(n.img,{alt:"image-audio-driver-hat-config00",src:i(59044).A+"",width:"1189",height:"465"})]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["Run the command ",(0,d.jsx)(n.code,{children:"sync && reboot"})," to restart the development board. If the device nodes like the following appear under /dev/snd, it indicates that the adapter board is installed successfully."]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-shell",children:"root@ubuntu:~# ls /dev/snd/\nPlayback   controlC0  pcmC0D0c  pcmC0D0p  pcmC0D1c  pcmC0D1p  pcmC1D0c  pcmC1D0p  timer\n```by-path  controlC0  pcmC0D0c  pcmC0D0p  pcmC0D1c  pcmC0D1p  timer\n"})}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.h3,{id:"uninstalling-method",children:"Uninstalling Method"}),"\n",(0,d.jsxs)(n.ol,{children:["\n",(0,d.jsxs)(n.li,{children:["Configure the audio board using ",(0,d.jsx)(n.code,{children:"srpi-config"}),(0,d.jsx)(n.br,{}),"\n","Go to ",(0,d.jsx)(n.code,{children:"3 Interface Options"}),"->",(0,d.jsx)(n.code,{children:"I5 Audio"}),(0,d.jsx)(n.br,{}),"\n","Select ",(0,d.jsx)(n.code,{children:"UNSET"})," to uninstall the audio driver and related configurations"]}),"\n"]}),"\n",(0,d.jsx)(n.h3,{id:"audio-nodes-1",children:"Audio Nodes"}),"\n",(0,d.jsxs)(n.p,{children:["The playback node for this audio board on the ",(0,d.jsx)(n.code,{children:"RDK X3"})," is ",(0,d.jsx)(n.code,{children:"pcmC0D1p"}),", and the recording node is ",(0,d.jsx)(n.code,{children:"pcmC0D0c"})]}),"\n",(0,d.jsx)(n.h3,{id:"recording-and-playback-test-1",children:"Recording and Playback Test"}),"\n",(0,d.jsxs)(n.p,{children:["The test uses the toolset of ",(0,d.jsx)(n.code,{children:"tinyalsa"})," library: use ",(0,d.jsx)(n.code,{children:"tinycap"})," for recording and ",(0,d.jsx)(n.code,{children:"tinyplay"})," for playback"]}),"\n",(0,d.jsxs)(n.p,{children:["Usage of ",(0,d.jsx)(n.code,{children:"tinycap"}),":"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-shell",children:"tinycap\nUsage: tinycap {file.wav | --} [-D card] [-d device] [-c channels] [-r rate] [-b bits] [-p period_size] [-n n_periods] [-t time_in_seconds]\n\nUse -- for filename to send raw PCM to stdout\n"})}),"\n",(0,d.jsxs)(n.p,{children:["Usage of ",(0,d.jsx)(n.code,{children:"tinyplay"}),":"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-shell",children:"tinyplay\nusage: tinyplay file.wav [options]\noptions:\n-D | --card   <card number>    The device to receive the audio\n-d | --device <device number>  The card to receive the audio\n-p | --period-size <size>      The size of the PCM's period\n-n | --period-count <count>    The number of PCM periods\n-i | --file-type <file-type >  The type of file to read (raw or wav)\n-c | --channels <count>        The amount of channels per frame\n-r | --rate <rate>             The amount of frames per second\n-b | --bits <bit-count>        The number of bits in one sample\n-M | --mmap                    Use memory mapped IO to play audio\n"})}),"\n",(0,d.jsxs)(n.p,{children:["If you want to learn more about the ",(0,d.jsx)(n.code,{children:"tinyalsa"})," library, please refer to their ",(0,d.jsx)(n.a,{href:"https://github.com/tinyalsa/tinyalsa",children:"repository"})]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Recording with a 2-channel microphone:"}),"\n"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:"tinycap ./2chn_test.wav -D 0 -d 0 -c 2 -b 16 -r 48000 -p 512 -n 4 -t 5\n"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Playback of stereo audio:"}),"\n"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:"tinyplay ./2chn_test.wav -D 0 -d 1\n"})}),"\n",(0,d.jsx)(n.h2,{id:"coexistence-of-audio-subboard-and-usb-sound-card",children:"Coexistence of Audio Subboard and USB Sound Card"}),"\n",(0,d.jsx)(n.p,{children:"If you have a USB sound card and want it to coexist with the above-mentioned audio subboard, please follow the steps below:"}),"\n",(0,d.jsxs)(n.ol,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"Make sure the audio subboard is functional according to the tutorial above."}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:["Connect the USB sound card and observe the newly added nodes under ",(0,d.jsx)(n.code,{children:"/dev/snd"})," after the driver is loaded. Taking ",(0,d.jsx)(n.code,{children:"WM8960"})," + USB ",(0,d.jsx)(n.strong,{children:"full-duplex"})," sound card as an example:"]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-bash",children:"    root@ubuntu:~# ls /dev/snd/\n    by-path  controlC0  pcmC0D0c  pcmC0D0p  pcmC0D1c  pcmC0D1p  pcmC1D0c  pcmC1D0p  timer\n"})}),"\n",(0,d.jsxs)(n.p,{children:["The ",(0,d.jsx)(n.code,{children:"pcmC1D0c pcmC1D0p"})," nodes are for the USB sound card, and they share a full-duplex node."]}),"\n",(0,d.jsxs)(n.ol,{start:"3",children:["\n",(0,d.jsxs)(n.li,{children:["Modify ",(0,d.jsx)(n.code,{children:"/etc/pulse/default.pa"})," and add the corresponding node information below ",(0,d.jsx)(n.code,{children:"load-module module-alsa-source"}),":"]}),"\n"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-apacheconf",children:"...\n\n.ifexists module-udev-detect.so\nload-module module-alsa-sink device=hw:0,1 mmap=false tsched=0 fragments=2 fragment_size=960 rate=48000 channels=2 rewind_safeguard=960\nload-module module-alsa-source device=hw:0,0 mmap=false tsched=0 fragments=2 fragment_size=960 rate=48000 channels=2\nload-module alsa device=hw:1,0 #corresponding to the above nodes\nload-module module-alsa-source device=hw:1,0 #corresponding to the above nodes\n.else\n\n...\n"})}),"\n",(0,d.jsxs)(n.ol,{start:"4",children:["\n",(0,d.jsx)(n.li,{children:"Save the configuration and reboot the development board."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(l,{...e})}):l(e)}},1549:(e,n,i)=>{i.d(n,{A:()=>d});const d=i.p+"assets/images/image-audio-driver-hat-config00-83afb5d22c677cddfac4ba81f5b248fc.png"},59044:(e,n,i)=>{i.d(n,{A:()=>d});const d=i.p+"assets/images/image-audio-driver-hat-config01-240f8abdb8ff30263cbecee0fc125d89.png"},8260:(e,n,i)=>{i.d(n,{A:()=>d});const d=i.p+"assets/images/image-audio-driver-hat-setup-ab5d6d682777a82ea7faa166cbee0066.jpg"},46564:(e,n,i)=>{i.d(n,{A:()=>d});const d=i.p+"assets/images/image-audio-driver-hat-395081612ff49a92aa58af08066aaf05.jpg"},79745:(e,n,i)=>{i.d(n,{A:()=>d});const d=i.p+"assets/images/image-audio-wm8960-e22ac0685b4ea89d5131a8dc9444d75a.jpg"},70363:(e,n,i)=>{i.d(n,{A:()=>d});const d=i.p+"assets/images/image-wm8960-audio-hat-setup-3fcf19217053dd36f2deb388cccd72ce.jpg"},28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>r});var d=i(96540);const o={},s=d.createContext(o);function a(e){const n=d.useContext(s);return d.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),d.createElement(s.Provider,{value:n},e.children)}}}]);