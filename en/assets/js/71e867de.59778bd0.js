"use strict";(self.webpackChunkrdk_doc=self.webpackChunkrdk_doc||[]).push([[7820],{44274:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>r,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>a});var i=o(74848),t=o(28453);const s={sidebar_position:1},d="7.2.1 Development Environment Setup and Compilation Instructions",l={id:"Advanced_development/linux_development/environment_build",title:"7.2.1 Development Environment Setup and Compilation Instructions",description:"This chapter introduces the requirements and setup of the cross-compilation development environment, as well as instructions for downloading the source code and compiling the system image.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/07_Advanced_development/02_linux_development/environment_build.md",sourceDirName:"07_Advanced_development/02_linux_development",slug:"/Advanced_development/linux_development/environment_build",permalink:"/rdk_doc/en/Advanced_development/linux_development/environment_build",draft:!1,unlisted:!1,editUrl:"https://github.com/D-Robotics/rdk_doc/blob/main/docs/docs/07_Advanced_development/02_linux_development/environment_build.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"7.2. Linux\u5f00\u53d1\u6307\u5357",permalink:"/rdk_doc/en/linux_development"},next:{title:"6.2 Driver Development Guide",permalink:"/rdk_doc/en/Advanced_development/linux_development/driver_development/"}},r={},a=[{value:"Cross-compilation Development Environment",id:"cross-compilation-development-environment",level:2},{value:"Compiling Environment Source Code (rdk-gen)",id:"compiling-environment-source-code-rdk-gen",level:2},{value:"Compiling the System Image",id:"compiling-the-system-image",level:2},{value:"Introduction to the Compilation Process of pack_image.sh",id:"introduction-to-the-compilation-process-of-pack_imagesh",level:3},{value:"Downloading Source Code",id:"downloading-source-code",level:2},{value:"Compile kernel",id:"compile-kernel",level:2},{value:"Compile hobot-xxx packages",id:"compile-hobot-xxx-packages",level:2},{value:"Building Debian Packages as a Whole",id:"building-debian-packages-as-a-whole",level:3},{value:"Building a Debian Package Individually",id:"building-a-debian-package-individually",level:3},{value:"Using Custom Debian Packages",id:"using-custom-debian-packages",level:3},{value:"Compiling Bootloader",id:"compiling-bootloader",level:2},{value:"Syncing Uboot Code",id:"syncing-uboot-code",level:3},{value:"Select board-level configuration file",id:"select-board-level-configuration-file",level:3},{value:"Compiling Bootloader as a Whole",id:"compiling-bootloader-as-a-whole",level:3},{value:"Modular Compilation of Bootloader",id:"modular-compilation-of-bootloader",level:3},{value:"Creating Ubuntu File System",id:"creating-ubuntu-file-system",level:2},{value:"Environment Configuration",id:"environment-configuration",level:3},{value:"Key Tool Introduction",id:"key-tool-introduction",level:3},{value:"debootstrap",id:"debootstrap",level:4},{value:"chroot",id:"chroot",level:4},{value:"parted",id:"parted",level:4},{value:"Script Code for Creating Ubuntu rootfs",id:"script-code-for-creating-ubuntu-rootfs",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"721-development-environment-setup-and-compilation-instructions",children:"7.2.1 Development Environment Setup and Compilation Instructions"}),"\n",(0,i.jsx)(n.p,{children:"This chapter introduces the requirements and setup of the cross-compilation development environment, as well as instructions for downloading the source code and compiling the system image."}),"\n",(0,i.jsx)(n.h2,{id:"cross-compilation-development-environment",children:"Cross-compilation Development Environment"}),"\n",(0,i.jsx)(n.p,{children:"Cross-compilation refers to developing and building software on a host machine, and then deploying the built software to a development board for execution. The host machine generally has higher performance and memory than the development board, which can accelerate code building and install more development tools for convenient development."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"image-20220329140159441",src:o(82648).A+"",width:"976",height:"560"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Host Compilation Environment Requirements"})}),"\n",(0,i.jsx)(n.p,{children:"It is recommended to use Ubuntu operating system. If using other system versions, adjustments may be needed for the compilation environment."}),"\n",(0,i.jsx)(n.p,{children:"For Ubuntu 18.04 system, install the following packages:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"sudo apt-get install -y build-essential make cmake libpcre3 libpcre3-dev bc bison \\\nflex python-numpy mtd-utils zlib1g-dev debootstrap \\\nlibdata-hexdumper-perl libncurses5-dev zip qemu-user-static \\\ncurl git liblz4-tool apt-cacher-ng libssl-dev checkpolicy autoconf \\\nandroid-tools-fsutils mtools parted dosfstools udev rsync\n"})}),"\n",(0,i.jsx)(n.p,{children:"For Ubuntu 20.04 system, install the following packages:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"sudo apt-get install -y build-essential make cmake libpcre3 libpcre3-dev bc bison \\\nflex python-numpy mtd-utils zlib1g-dev debootstrap \\\nlibdata-hexdumper-perl libncurses5-dev zip qemu-user-static \\\ncurl git liblz4-tool apt-cacher-ng libssl-dev checkpolicy autoconf \\\nandroid-sdk-libsparse-utils android-sdk-ext4-utils mtools parted dosfstools udev rsync\n"})}),"\n",(0,i.jsx)(n.p,{children:"For Ubuntu 22.04 system, install the following packages:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"sudo apt-get install -y build-essential make cmake libpcre3 libpcre3-dev bc bison \\\nflex python3-numpy mtd-utils zlib1g-dev debootstrap \\\nlibdata-hexdumper-perl libncurses5-dev zip qemu-user-static \\\ncurl repo git liblz4-tool apt-cacher-ng libssl-dev checkpolicy autoconf \\\nandroid-sdk-libsparse-utils mtools parted dosfstools udev rsync\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Install Python"})}),"\n",(0,i.jsx)(n.p,{children:"Compiling the Linux kernel requires a Python 2 environment. Starting from version Ubuntu 22.04, Python 2 is no longer installed by default. Therefore, you need to execute the following command to install it:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"sudo apt install python2\n"})}),"\n",(0,i.jsx)(n.p,{children:"Compiling Debian packages requires a Python 3 environment. Use the following commands to set the Python selector and install python3-setuptools and pip, which are dependency tools for generating wheel packages:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"sudo update-alternatives --install /usr/bin/python python /usr/bin/python2 1\nsudo update-alternatives --install /usr/bin/python python /usr/bin/python3 2\nsudo update-alternatives --list python\n\napt-get install python3-setuptools\ncurl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\npython get-pip.py\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Installing Cross-Compilation Toolchain"})}),"\n",(0,i.jsx)(n.p,{children:"Execute the following command to download the cross-compilation toolchain:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"curl -fO http://archive.d-robotics.cc/toolchain/gcc-ubuntu-9.3.0-2020.03-x86_64-aarch64-linux-gnu.tar.xz\n"})}),"\n",(0,i.jsx)(n.p,{children:"Unzip and install it. It is recommended to install it under the /opt directory. Usually, writing data to the /opt directory requires sudo permission, for example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"sudo tar -xvf gcc-ubuntu-9.3.0-2020.03-x86_64-aarch64-linux-gnu.tar.xz -C /opt\n"})}),"\n",(0,i.jsx)(n.p,{children:"Configure environment variables for the cross-compilation toolchain:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"export CROSS_COMPILE=/opt/gcc-ubuntu-9.3.0-2020.03-x86_64-aarch64-linux-gnu/bin/aarch64-linux-gnu-\nexport LD_LIBRARY_PATH=/opt/gcc-ubuntu-9.3.0-2020.03-x86_64-aarch64-linux-gnu/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH\nexport PATH=$PATH:/opt/gcc-ubuntu-9.3.0-2020.03-x86_64-aarch64-linux-gnu/bin/\nexport ARCH=arm64\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The above commands configure the environment variables temporarily. To make the configuration permanent, you can add the above commands to the environment variable files ",(0,i.jsx)(n.code,{children:"~/.profile"})," or ",(0,i.jsx)(n.code,{children:"~/.bash_profile"})," at the end."]}),"\n",(0,i.jsx)(n.h2,{id:"compiling-environment-source-code-rdk-gen",children:"Compiling Environment Source Code (rdk-gen)"}),"\n",(0,i.jsx)(n.p,{children:"rdk-gen is used to build a custom operating system image for the D-Robotics RDK X3. It provides a scalable framework that allows users to customize and build the Ubuntu operating system for RDK X3 according to their needs."}),"\n",(0,i.jsx)(n.p,{children:"Download the source code:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"git clone https://github.com/D-Robotics/rdk-gen.git\n"})}),"\n",(0,i.jsx)(n.p,{children:"After downloading, the directory structure of rdk-gen is as follows:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:(0,i.jsx)(n.strong,{children:"Directory"})}),(0,i.jsx)(n.th,{children:(0,i.jsx)(n.strong,{children:"Description"})})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"pack_image.sh"}),(0,i.jsx)(n.td,{children:"Code entry for building system images"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"download_samplefs.sh"}),(0,i.jsx)(n.td,{children:"Download the pre-made base Ubuntu file system"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"download_deb_pkgs.sh"}),(0,i.jsx)(n.td,{children:"Download D-Robotics's deb packages, including kernel, multimedia libraries, sample code, tros.bot, etc., which need to be pre-installed in the system image"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"hobot_customize_rootfs.sh"}),(0,i.jsx)(n.td,{children:"Customized modification of the Ubuntu file system"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"source_sync.sh"}),(0,i.jsx)(n.td,{children:"Download source code, including bootloader, uboot, kernel, example code, etc."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"mk_kernel.sh"}),(0,i.jsx)(n.td,{children:"Compile kernel, device tree, and driver modules"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"mk_debs.sh"}),(0,i.jsx)(n.td,{children:"Generate deb packages"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"make_ubuntu_samplefs.sh"}),(0,i.jsx)(n.td,{children:"Code for creating Ubuntu system filesystem, which can be modified to customize samplefs"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"config"}),(0,i.jsx)(n.td,{children:"Store the contents that need to be placed in the /hobot/config directory of the system image, a VFAT-rooted partition. If the SD card boot method is used, users can directly modify the contents of this partition in the Windows system."})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"compiling-the-system-image",children:"Compiling the System Image"}),"\n",(0,i.jsx)(n.p,{children:"Run the following command to package the system image:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"cd rdk-gen\nsudo ./pack_image.sh\n"})}),"\n",(0,i.jsxs)(n.p,{children:["sudo privileges are required for compilation. After successful compilation, the system image file ",(0,i.jsx)(n.code,{children:"*.img"})," will be generated in the deploy directory."]}),"\n",(0,i.jsx)(n.h3,{id:"introduction-to-the-compilation-process-of-pack_imagesh",children:"Introduction to the Compilation Process of pack_image.sh"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Call the scripts download_samplefs.sh and download_deb_pkgs.sh to download samplefs and the required pre-installed deb packages from D-Robotics's file server."}),"\n",(0,i.jsx)(n.li,{children:"Extract samplefs and call the hobot_customize_rootfs.sh script to customize the filesystem configuration."}),"\n",(0,i.jsx)(n.li,{children:"Install deb packages into the filesystem."}),"\n",(0,i.jsxs)(n.li,{children:["Generate the system image. Refer to ",(0,i.jsx)(n.a,{href:"..../../../01_Quick_start/install_os.md",children:"Install OS"})," for how to use the system image."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"downloading-source-code",children:"Downloading Source Code"}),"\n",(0,i.jsxs)(n.p,{children:["Downloading source code is not required when running ",(0,i.jsx)(n.code,{children:"pack_image.sh"})," to compile the system image, because ",(0,i.jsx)(n.code,{children:"pack_image.sh"})," will directly download the official debian packages from D-Robotics's file server and install them into the system. Only when you need to modify the content of debian packages and re-create custom packages, you need to download the source code."]}),"\n",(0,i.jsxs)(n.p,{children:["The source code of rdk-linux related linux kernel, bootloader, hobot-xxx packages are hosted on ",(0,i.jsx)(n.a,{href:"https://github.com/",children:"GitHub"}),". Before downloading the code, please register and log in to ",(0,i.jsx)(n.a,{href:"https://github.com/",children:"GitHub"}),", and add the ",(0,i.jsx)(n.code,{children:"SSH Key"})," of the development server to user settings through ",(0,i.jsx)(n.a,{href:"https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent",children:"Generating a new SSH key and adding it to the ssh-agent"})," method."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"source_sync.sh"})," is used to download the source code, including bootloader, uboot, kernel, example code, etc. This download program downloads all the source code to the local computer by executing ",(0,i.jsx)(n.code,{children:"git clone git@github.com:xxx.git"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Run the following command to download the main branch code (the latest release version branch maintained by the official):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"./source_sync.sh -t main\n"})}),"\n",(0,i.jsx)(n.p,{children:"Please execute the following command to download the code from the development branch (development branch, not fully tested, may have issues):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"./source_sync.sh -t develop\n"})}),"\n",(0,i.jsx)(n.p,{children:"If you want to download the source code that corresponds to the official system image version, such as the source code for the 2.0.0 version, please use the following command:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"./source_sync.sh -t os-image_2.0.0\n"})}),"\n",(0,i.jsxs)(n.p,{children:["By default, the program will download the source code to the ",(0,i.jsx)(n.code,{children:"source"})," directory:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"source\n\u251c\u2500\u2500 bootloader\n\u251c\u2500\u2500 hobot-boot\n\u251c\u2500\u2500 hobot-bpu-drivers\n\u251c\u2500\u2500 hobot-camera\n\u251c\u2500\u2500 hobot-configs\n\u251c\u2500\u2500 hobot-display\n\u251c\u2500\u2500 hobot-dnn\n\u251c\u2500\u2500 hobot-dtb\n\u251c\u2500\u2500 hobot-io\n\u251c\u2500\u2500 hobot-io-samples\n\u251c\u2500\u2500 hobot-kernel-headers\n\u251c\u2500\u2500 hobot-multimedia\n\u251c\u2500\u2500 hobot-multimedia-dev\n\u251c\u2500\u2500 hobot-spdev\n\u251c\u2500\u2500 hobot-sp-samples\n\u251c\u2500\u2500 hobot-utils\n\u251c\u2500\u2500 hobot-wifi\n\u2514\u2500\u2500 kernel\n"})}),"\n",(0,i.jsx)(n.h2,{id:"compile-kernel",children:"Compile kernel"}),"\n",(0,i.jsxs)(n.p,{children:["The kernel source code is in ",(0,i.jsx)(n.code,{children:"source/kernel"}),", to facilitate the compilation of the kernel, the program ",(0,i.jsx)(n.code,{children:"mk_kernel.sh"})," is provided for users to use."]}),"\n",(0,i.jsx)(n.p,{children:"Execute the following command to compile the Linux kernel:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"sudo ./mk_kernel.sh\n"})}),"\n",(0,i.jsxs)(n.p,{children:["After the compilation is completed, the kernel image, driver modules, device tree, and kernel header files will be generated in the ",(0,i.jsx)(n.code,{children:"deploy/kernel"})," directory."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"dtb  Image  Image.lz4  kernel_headers  modules\n"})}),"\n",(0,i.jsx)(n.p,{children:"These contents will be used by three Debian packages: hobot-boot, hobot-dtb, and hobot-kernel-headers. If you want to customize and modify these three packages, you need to compile the kernel first."}),"\n",(0,i.jsx)(n.h2,{id:"compile-hobot-xxx-packages",children:"Compile hobot-xxx packages"}),"\n",(0,i.jsxs)(n.p,{children:["The hobot-xxx packages are the source code and configuration of Debian packages maintained by D-Robotics. After downloading the source code, you can execute ",(0,i.jsx)(n.code,{children:"mk_debs.sh"})," to rebuild the Debian packages."]}),"\n",(0,i.jsx)(n.p,{children:"The help information is as follows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"$ ./mk_debs.sh help\nThe debian package named by help is not supported, please check the input parameters.\n./mk_debs.sh [all] | [deb_name]\n    hobot-multimedia-dev, Version 2.0.0\n    hobot-wifi, Version 2.0.0\n    hobot-camera, Version 2.0.0\n    hobot-dtb, Version 2.0.0\n    hobot-configs, Version 2.0.0\n    hobot-io, Version 2.0.0\n    hobot-spdev, Version 2.0.0\n    hobot-boot, Version 2.0.0\n    hobot-sp-samples, Version 2.0.0\n    hobot-bpu-drivers, Version 2.0.0\n    hobot-multimedia-samples, Version 2.0.0\n    hobot-dnn, Version 2.0.0\n    hobot-io-samples, Version 2.0.0\n    hobot-kernel-headers, Version 2.0.0\n    hobot-utils, Version 2.0.0\n    hobot-multimedia, Version 2.0.0\n    hobot-display, Version 2.0.0\n"})}),"\n",(0,i.jsx)(n.p,{children:"The descriptions and relationships of each Debian package are shown as follows:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Flowchart",src:o(93893).A+"",width:"969",height:"601"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Package Name"}),(0,i.jsx)(n.th,{children:"Content Description or Example"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"hobot-sp-samples_xxx.deb"}),(0,i.jsx)(n.td,{children:"Sample code for multimedia and algorithms: including video streaming and display output of vio, encoding and decoding examples, sample algorithms for image classification, object detection, segmentation, etc."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"hobot-io-samples_xxx.deb"}),(0,i.jsx)(n.td,{children:"Sample code for using the 40-pin interface: Python language examples for the 40-pin interface."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"hobot-spdev_xxx.deb"}),(0,i.jsx)(n.td,{children:"Encapsulation libraries and header files for C/C++ interfaces of multimedia and algorithms, encapsulation libraries and header files for Python interfaces of multimedia and algorithms."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"hobot-multimedia-dev_xxx.deb"}),(0,i.jsx)(n.td,{children:"Low-level multimedia header files."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"hobot-multimedia_xxx.deb"}),(0,i.jsx)(n.td,{children:"Runtime library files for multimedia: runtime library files (so files), configuration files, firmware, etc., for all multimedia-related components."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"hobot-multimedia-samples_xxx.deb"}),(0,i.jsx)(n.td,{children:"Reference examples based on the low-level multimedia interface."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"hobot-camera_xxx.deb"}),(0,i.jsx)(n.td,{children:"Drivers and ISP parameter libraries for compatible camera sensors."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"hobot-dnn_xxx.deb"}),(0,i.jsx)(n.td,{children:"Runtime libraries and header files for algorithm-related components."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"hobot-io_xxx.deb"}),(0,i.jsx)(n.td,{children:"Interfaces and header files for 40-pin GPIO usage (implemented in Python)."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"hobot-configs_xxx.deb"}),(0,i.jsx)(n.td,{children:"D-Robotics's custom system configuration: udev configuration, apt source configuration, network, Bluetooth, USB configuration, autostart item configuration, etc."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"hobot-display_xxx.deb"})}),(0,i.jsx)(n.td,{children:"Image display related, HDMI, LCD display configuration"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"hobot-wifi_xxx.deb"})}),(0,i.jsx)(n.td,{children:"Configuration for Wi-Fi and Bluetooth modules"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"hobot-kernel-headers_xxx.deb"})}),(0,i.jsx)(n.td,{children:"Configuration files and header files compiled after the kernel, used to support users to compile kernel drivers separately"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"hobot-boot_xxx.deb"})}),(0,i.jsx)(n.td,{children:"Kernel image file Image and driver module file"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"hobot-bpu-driver_xxx.deb"})}),(0,i.jsx)(n.td,{children:"BPU driver"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"hobot-dtb_xxx.deb"})}),(0,i.jsx)(n.td,{children:"Kernel device tree"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"building-debian-packages-as-a-whole",children:"Building Debian Packages as a Whole"}),"\n",(0,i.jsx)(n.p,{children:"Running the following command will rebuild all debian packages (kernel compilation is required beforehand):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"./mk_debs.sh\n"})}),"\n",(0,i.jsxs)(n.p,{children:["After the build is complete, deb packages will be generated in the ",(0,i.jsx)(n.code,{children:"deploy/deb_pkgs"})," directory."]}),"\n",(0,i.jsx)(n.h3,{id:"building-a-debian-package-individually",children:"Building a Debian Package Individually"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"mk_debs.sh"})," supports building specified packages individually by passing the package name as an argument, for example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"./mk_debs.sh hobot-configs\n"})}),"\n",(0,i.jsx)(n.h3,{id:"using-custom-debian-packages",children:"Using Custom Debian Packages"}),"\n",(0,i.jsxs)(n.p,{children:["When running ",(0,i.jsx)(n.code,{children:"pack_image.sh"})," without arguments, it will download the latest release of debian packages from the D-Robotics file server and install them into the system. If you modify a package with the same name, you need to skip the process of downloading debian packages from the file server. You can use any optional parameters when executing the ",(0,i.jsx)(n.code,{children:"pack_image.sh"})," command. For example, the following command will not redownload the debian package. Replace the original downloaded software package with your own package and rebuild it. For example, if you regenerate ",(0,i.jsx)(n.code,{children:"hobot-boot"})," and name it ",(0,i.jsx)(n.code,{children:"hobot-boot_2.0.0-customer_arm64.deb"}),", use that file to replace the ",(0,i.jsx)(n.code,{children:"hobot-boot-xxx_arm64.deb"})," file in the ",(0,i.jsx)(n.code,{children:"deb_packages"})," directory."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"sudo ./pack_image.sh c\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If you have added a custom-named software package and want to install it into the system, you can create a ",(0,i.jsx)(n.code,{children:"third_packages"})," directory under the ",(0,i.jsx)(n.code,{children:"rdk-gen"})," directory, and place the debian package you want to install in that directory. The software packages placed in the ",(0,i.jsx)(n.code,{children:"third_packages"})," directory will be installed together with the software packages in the ",(0,i.jsx)(n.code,{children:"deb_packages"})," directory, and they will not affect each other."]}),"\n",(0,i.jsx)(n.h2,{id:"compiling-bootloader",children:"Compiling Bootloader"}),"\n",(0,i.jsxs)(n.p,{children:["The bootloader source code is used to generate the minimal boot image ",(0,i.jsx)(n.code,{children:"disk_xxx_miniboot.img"}),", which contains the partition table, spl, ddr, bl31, and uboot."]}),"\n",(0,i.jsxs)(n.p,{children:["The minimal boot image of RDK X3 is generally maintained and released by D-Robotics. You can download the corresponding version from ",(0,i.jsx)(n.a,{href:"http://archive.d-robotics.cc/downloads/miniboot/",children:"miniboot"}),". If there are no modifications to uboot, you can directly use the official release image."]}),"\n",(0,i.jsxs)(n.p,{children:["Follow the steps below to recompile and generate ",(0,i.jsx)(n.code,{children:"miniboot"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"syncing-uboot-code",children:"Syncing Uboot Code"}),"\n",(0,i.jsx)(n.p,{children:"Execute the following command to download uboot code:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"cd source/bootloader/\ngit submodule init\ngit submodule update\n"})}),"\n",(0,i.jsx)(n.h3,{id:"select-board-level-configuration-file",children:"Select board-level configuration file"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"cd source/bootloader/build\n./xbuild.sh lunch\n\nYou're building on #221-Ubuntu SMP Tue Apr 18 08:32:52 UTC 2023\nLunch menu... pick a combo:\n      0. horizon/x3/board_ubuntu_emmc_sdcard_config.mk\n      1. horizon/x3/board_ubuntu_emmc_sdcard_samsung_4GB_config.mk\n      2. horizon/x3/board_ubuntu_nand_sdcard_config.mk\n      3. horizon/x3/board_ubuntu_nand_sdcard_samsung_4GB_config.mk\nWhich would you like? [0] :  \n"})}),"\n",(0,i.jsx)(n.p,{children:"Choose the board-level configuration file according to the prompt."}),"\n",(0,i.jsx)(n.p,{children:"The above preset configuration files are for different development boards' hardware configurations, the differences are in the use of emmc or nand to burn miniboot, different ddr models and capacities, and different root file systems:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Board-level Configuration File"}),(0,i.jsx)(n.th,{children:"Memory"}),(0,i.jsx)(n.th,{children:"rootfs"}),(0,i.jsx)(n.th,{children:"Minimum Boot Image Storage"}),(0,i.jsx)(n.th,{children:"Main Storage"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"board_ubuntu_emmc_sdcard_config.mk"}),(0,i.jsx)(n.td,{children:"LPDDR4 2GB"}),(0,i.jsx)(n.td,{children:"ubuntu-20.04"}),(0,i.jsx)(n.td,{children:"eMMC"}),(0,i.jsx)(n.td,{children:"sdcard"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"board_ubuntu_emmc_sdcard_samsung_4GB_config.mk"}),(0,i.jsx)(n.td,{children:"LPDDR4 4GB"}),(0,i.jsx)(n.td,{children:"ubuntu-20.04"}),(0,i.jsx)(n.td,{children:"eMMC"}),(0,i.jsx)(n.td,{children:"sdcard"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"board_ubuntu_nand_sdcard_config.mk"}),(0,i.jsx)(n.td,{children:"LPDDR4 2GB"}),(0,i.jsx)(n.td,{children:"ubuntu-20.04"}),(0,i.jsx)(n.td,{children:"nand"}),(0,i.jsx)(n.td,{children:"sdcard/eMMC"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"board_ubuntu_nand_sdcard_samsung_4GB_config.mk"}),(0,i.jsx)(n.td,{children:"LPDDR4 4GB"}),(0,i.jsx)(n.td,{children:"ubuntu-20.04"}),(0,i.jsx)(n.td,{children:"nand"}),(0,i.jsx)(n.td,{children:"sdcard/eMMC"})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Minimum Boot Image Storage:"})," Storage for burning miniboot, users of RDK X3 and RDK X3 Module please select nand"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Main Storage:"})," Storage for the ubuntu system image, the system image of sdcard is compatible with eMMC, which means it can be burned to a Micro SD storage card or eMMC"]}),"\n",(0,i.jsx)(n.p,{children:"The lunch command also supports specifying numbers and board-level configuration file names to complete the configuration directly."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"$ ./xbuild.sh lunch 2\n\nYou're building on #221-Ubuntu SMP Tue Apr 18 08:32:52 UTC 2023\nYou are selected board config: horizon/x3/board_ubuntu_nand_sdcard_config.mk\n\n$ ./xbuild.sh lunch board_ubuntu_nand_sdcard_config.mk\n\nYou're building on #221-Ubuntu SMP Tue Apr 18 08:32:52 UTC 2023\nYou are selected board config: horizon/x3/board_ubuntu_nand_sdcard_config.mk\n"})}),"\n",(0,i.jsx)(n.h3,{id:"compiling-bootloader-as-a-whole",children:"Compiling Bootloader as a Whole"}),"\n",(0,i.jsx)(n.p,{children:"Go to the build directory and execute xbuild.sh to compile the bootloader as a whole:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"cd build\n./xbuild.sh\n"})}),"\n",(0,i.jsx)(n.p,{children:"After successful compilation, the image files, including miniboot.img, uboot.img, and disk_nand_minimum_boot.img, will be generated in the output directory of the compilation (deploy_ubuntu_xxx). The disk_nand_minimum_boot.img is the minimum boot image."}),"\n",(0,i.jsx)(n.h3,{id:"modular-compilation-of-bootloader",children:"Modular Compilation of Bootloader"}),"\n",(0,i.jsx)(n.p,{children:"Use the xbuild.sh script to compile individual modules and the generated image files will be output to the compilation output directory (deploy_ubuntu_xxx)."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"./xbuild.sh miniboot | uboot\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"miniboot:"})," Calls mk_miniboot.sh to generate miniboot.img"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"uboot:"})," Calls mk_uboot.sh to generate uboot.img"]}),"\n",(0,i.jsx)(n.p,{children:"After modular compilation, the pack command can be executed to package disk_nand_minimum_boot.img."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"./xbuild.sh pack\n"})}),"\n",(0,i.jsx)(n.h2,{id:"creating-ubuntu-file-system",children:"Creating Ubuntu File System"}),"\n",(0,i.jsxs)(n.p,{children:["This section describes how to create the ",(0,i.jsx)(n.code,{children:"samplefs_desktop-v2.0.0.tar.gz"})," file system. D-Robotics maintains this file system, but if customization is required, it needs to be recreated according to the instructions in this section."]}),"\n",(0,i.jsx)(n.h3,{id:"environment-configuration",children:"Environment Configuration"}),"\n",(0,i.jsx)(n.p,{children:"It is recommended to use an Ubuntu host to create the Ubuntu file system for the development board. First, install the following software packages in the host environment:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"sudo apt-get install wget ca-certificates device-tree-compiler pv bc lzop zip binfmt-support \\\nbuild-essential ccache debootstrap ntpdate gawk gcc-arm-linux-gnueabihf qemu-user-static \\\nu-boot-tools uuid-dev zlib1g-dev unzip libusb-1.0-0-dev fakeroot parted pkg-config \\\nlibncurses5-dev whiptail debian-keyring debian-archive-keyring f2fs-tools libfile-fcntllock-perl \\\nrsync libssl-dev nfs-kernel-server btrfs-progs ncurses-term p7zip-full kmod dosfstools \\\nlibc6-dev-armhf-cross imagemagick curl patchutils liblz4-tool libpython2.7-dev linux-base swig acl \\\npython3-dev python3-distutils libfdt-dev locales ncurses-base pixz dialog systemd-container udev \\\nlib32stdc++6 libc6-i386 lib32ncurses5 lib32tinfo5 bison libbison-dev flex libfl-dev cryptsetup gpg \\\ngnupg1 gpgv1 gpgv2 cpio aria2 pigz dirmngr python3-distutils distcc git dos2unix apt-cacher-ng\n"})}),"\n",(0,i.jsx)(n.h3,{id:"key-tool-introduction",children:"Key Tool Introduction"}),"\n",(0,i.jsx)(n.h4,{id:"debootstrap",children:"debootstrap"}),"\n",(0,i.jsx)(n.p,{children:'debootstrap is a tool for building a basic system (root file system) in debian/ubuntu. The generated directory complies with the Linux File System Standard (FHS), including directories such as /boot, /etc, /bin, /usr, etc. However, it is much smaller in size compared to the Linux distribution version, and its functionality is not as powerful. Therefore, it can only be called a "basic system", so it can be customized according to your own needs for the ubuntu system.'}),"\n",(0,i.jsx)(n.p,{children:"Installation of debootstrap on Ubuntu (PC):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"sudo apt-get install debootstrap\n"})}),"\n",(0,i.jsx)(n.p,{children:"Usage:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"# Additional parameters can be added to specify the source\nsudo debootstrap --arch [platform] [distribution code] [directory] [source]\n"})}),"\n",(0,i.jsx)(n.h4,{id:"chroot",children:"chroot"}),"\n",(0,i.jsxs)(n.p,{children:["chroot, i.e. change root directory. In the Linux system, the default directory structure starts with ",(0,i.jsx)(n.code,{children:"/"}),", which is the root. After using chroot, the system's directory structure will be changed to the specified location as the new root (/)."]}),"\n",(0,i.jsx)(n.h4,{id:"parted",children:"parted"}),"\n",(0,i.jsx)(n.p,{children:"parted is a powerful disk partition and resizing tool developed by the GNU organization. Unlike fdisk, it supports resizing partitions. Designed for Linux, it does not build multiple partition types associated with fdisk, but it can handle the most common partition formats, including ext2, ext3, fat16, fat32, NTFS, ReiserFS, JFS, XFS, UFS, HFS, and Linux swap partition."}),"\n",(0,i.jsx)(n.h3,{id:"script-code-for-creating-ubuntu-rootfs",children:"Script Code for Creating Ubuntu rootfs"}),"\n",(0,i.jsxs)(n.p,{children:["Download ",(0,i.jsx)(n.code,{children:"rdk-gen"})," source code:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"git clone https://github.com/D-Robotics/rdk-gen.git\n"})}),"\n",(0,i.jsx)(n.p,{children:"Execute the following command to generate the Ubuntu file system:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"mkdir ubuntu_rootfs\ncd ubuntu_rootfs\ncp ../make_ubuntu_rootfs.sh .\nchmod +x make_ubuntu_rootfs.sh\nsudo ./make_ubuntu_rootfs.sh\n"})}),"\n",(0,i.jsx)(n.p,{children:"Successful compilation output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"desktop/                                   # Compilation output directory\n\u251c\u2500\u2500 focal-xj3-arm64                        # Root file system generated after successful compilation, with various temporary system files\u2500\u2500 samplefs_desktop-v2.0.0.tar.gz         # Compressed package including the necessary content for the focal-xj3-arm64 \n\u2514\u2500\u2500 samplefs_desktop-v2.0.0.tar.gz.info    # Information about the currently installed apt packages\n\nrootfs/                                    # After extracting samplefs_desktop-v2.0.0.tar.gz, the following files should be included\n\u251c\u2500\u2500 app\n\u251c\u2500\u2500 bin -> usr/bin\n\u251c\u2500\u2500 boot\n\u251c\u2500\u2500 dev\n\u251c\u2500\u2500 etc\n\u251c\u2500\u2500 home\n\u251c\u2500\u2500 lib -> usr/lib\n\u251c\u2500\u2500 media\n\u251c\u2500\u2500 mnt\n\u251c\u2500\u2500 opt\n\u251c\u2500\u2500 proc\n\u251c\u2500\u2500 root\n\u251c\u2500\u2500 run\n\u251c\u2500\u2500 sbin -> usr/sbin\n\u251c\u2500\u2500 srv\n\u251c\u2500\u2500 sys\n\u251c\u2500\u2500 tmp\n\u251c\u2500\u2500 userdata\n\u251c\u2500\u2500 usr\n\u2514\u2500\u2500 var\n\n21 directories, 5 files\n"})}),"\n",(0,i.jsx)(n.p,{children:"In the code, key variable definitions are as follows:"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"PYTHON_PACKAGE_LIST"}),": A list of Python packages to be installed."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"DEBOOTSTRAP_LIST"}),": Debian packages to be installed during the execution of debootstrap."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"BASE_PACKAGE_LIST"}),": The essential Debian packages required for a minimal Ubuntu system installation."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"SERVER_PACKAGE_LIST"}),": Additional Debian packages that will be installed on top of the base version for an Ubuntu Server edition."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"DESKTOP_PACKAGE_LIST"}),": Software packages needed to support a graphical desktop environment."]}),"\n",(0,i.jsxs)(n.p,{children:["The officially maintained ",(0,i.jsx)(n.code,{children:"samplefs_desktop"})," filesystem by D-Robotics includes all configurations from these package lists. Users can customize this by adding or removing packages according to their specific requirements, maintaining the original format or structure."]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},82648:(e,n,o)=>{o.d(n,{A:()=>i});const i=o.p+"assets/images/image-20220329140159441-9e45a309ac47ad503fcc2b37f97e6492.png"},93893:(e,n,o)=>{o.d(n,{A:()=>i});const i=o.p+"assets/images/image-20221102173111002-451cb9e4e10b092fb7dedacc03d4b3d3.jpg"},28453:(e,n,o)=>{o.d(n,{R:()=>d,x:()=>l});var i=o(96540);const t={},s=i.createContext(t);function d(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);