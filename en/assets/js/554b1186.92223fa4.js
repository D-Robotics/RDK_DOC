"use strict";(self.webpackChunkrdk_doc=self.webpackChunkrdk_doc||[]).push([[663],{28453:(e,i,n)=>{n.d(i,{R:()=>l,x:()=>r});var d=n(96540);const t={},s=d.createContext(t);function l(e){const i=d.useContext(s);return d.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),d.createElement(s.Provider,{value:i},e.children)}},64737:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>o});var d=n(74848),t=n(28453);const s={sidebar_position:6},l="SYS (Module Binding) API",r={id:"Basic_Application/multi_media/multi_media_api/cdev_multimedia_api_x3/sys_api",title:"SYS (Module Binding) API",description:"The SYS API provides the following interfaces:",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/03_Basic_Application/04_multi_media/multi_media_api/cdev_multimedia_api_x3/sys_api.md",sourceDirName:"03_Basic_Application/04_multi_media/multi_media_api/cdev_multimedia_api_x3",slug:"/Basic_Application/multi_media/multi_media_api/cdev_multimedia_api_x3/sys_api",permalink:"/rdk_doc/en/Basic_Application/multi_media/multi_media_api/cdev_multimedia_api_x3/sys_api",draft:!1,unlisted:!1,editUrl:"https://github.com/D-Robotics/rdk_doc/blob/main/docs/03_Basic_Application/04_multi_media/multi_media_api/cdev_multimedia_api_x3/sys_api.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"BPU (Algorithm Inference Module) API",permalink:"/rdk_doc/en/Basic_Application/multi_media/multi_media_api/cdev_multimedia_api_x3/bpu_api"},next:{title:"4.6 RDK Ultra \u591a\u5a92\u4f53\u63a5\u53e3\u8bf4\u660e",permalink:"/rdk_doc/en/Basic_Application/multi_media/multi_media_api/pydev_multimedia_api_ultra/"}},c={},o=[{value:"sp_module_bind",id:"sp_module_bind",level:3},{value:"sp_module_unbind",id:"sp_module_unbind",level:3}];function a(e){const i={code:"code",h1:"h1",h3:"h3",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(i.h1,{id:"sys-module-binding-api",children:"SYS (Module Binding) API"}),"\n",(0,d.jsxs)(i.p,{children:["The ",(0,d.jsx)(i.code,{children:"SYS"})," API provides the following interfaces:"]}),"\n",(0,d.jsxs)(i.table,{children:[(0,d.jsx)(i.thead,{children:(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.th,{children:"Function"}),(0,d.jsx)(i.th,{children:"Description"})]})}),(0,d.jsxs)(i.tbody,{children:[(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:"sp_module_bind"}),(0,d.jsx)(i.td,{children:(0,d.jsx)(i.strong,{children:"Bind data source and destination module"})})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:"sp_module_unbind"}),(0,d.jsx)(i.td,{children:(0,d.jsx)(i.strong,{children:"Unbind modules"})})]})]})]}),"\n",(0,d.jsx)(i.h3,{id:"sp_module_bind",children:"sp_module_bind"}),"\n",(0,d.jsx)(i.p,{children:(0,d.jsx)(i.strong,{children:"[Function Prototype]"})}),"\n",(0,d.jsx)(i.p,{children:(0,d.jsx)(i.code,{children:"int32_t sp_module_bind(void *src, int32_t src_type, void *dst, int32_t dst_type)"})}),"\n",(0,d.jsx)(i.p,{children:(0,d.jsx)(i.strong,{children:"[Description]"})}),"\n",(0,d.jsxs)(i.p,{children:["This interface can internally bind the output and input of the ",(0,d.jsx)(i.code,{children:"VIO"}),", ",(0,d.jsx)(i.code,{children:"ENCODER"}),", ",(0,d.jsx)(i.code,{children:"DECODER"}),", and ",(0,d.jsx)(i.code,{children:"DISPLAY"})," modules. After binding, the data between the two modules will automatically flow internally without user intervention. For example, after binding ",(0,d.jsx)(i.code,{children:"VIO"})," and ",(0,d.jsx)(i.code,{children:"DISPLAY"}),", the data from the opened MIPI camera will be directly displayed on the screen without calling the ",(0,d.jsx)(i.code,{children:"sp_vio_get_frame"})," interface to retrieve the data and then calling the ",(0,d.jsx)(i.code,{children:"sp_display_set_image"})," interface of ",(0,d.jsx)(i.code,{children:"DISPLAY"})," for display."]}),"\n",(0,d.jsx)(i.p,{children:"The supported module binding relationships are as follows:"}),"\n",(0,d.jsxs)(i.table,{children:[(0,d.jsx)(i.thead,{children:(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.th,{children:"Source Module"}),(0,d.jsx)(i.th,{children:"Destination Module"})]})}),(0,d.jsxs)(i.tbody,{children:[(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:"VIO"}),(0,d.jsx)(i.td,{children:"ENCODER"})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:"VIO"}),(0,d.jsx)(i.td,{children:"DISPLAY"})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:"DECODER"}),(0,d.jsx)(i.td,{children:"ENCODER"})]}),(0,d.jsxs)(i.tr,{children:[(0,d.jsx)(i.td,{children:"DECODER"}),(0,d.jsx)(i.td,{children:"DISPLAY"})]})]})]}),"\n",(0,d.jsx)(i.p,{children:(0,d.jsx)(i.strong,{children:"[Parameters]"})}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"src"}),": Object pointer of the data source module (obtained by calling various module initialization interfaces)"]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"src_type"}),": Type of the source data module, supports ",(0,d.jsx)(i.code,{children:"SP_MTYPE_VIO"})," and ",(0,d.jsx)(i.code,{children:"SP_MTYPE_DECODER"})]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"dst"}),": Object pointer of the destination module (obtained by calling various module initialization interfaces)"]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"dst_type"}),": Type of the destination data module, supports ",(0,d.jsx)(i.code,{children:"SP_MTYPE_ENCODER"})," and ",(0,d.jsx)(i.code,{children:"SP_MTYPE_DISPLAY"})]}),"\n"]}),"\n",(0,d.jsx)(i.p,{children:(0,d.jsx)(i.strong,{children:"[Return Type]"})}),"\n",(0,d.jsx)(i.p,{children:"Returns 0 on success, and other values on failure."}),"\n",(0,d.jsx)(i.h3,{id:"sp_module_unbind",children:"sp_module_unbind"}),"\n",(0,d.jsx)(i.p,{children:(0,d.jsx)(i.strong,{children:"[Function Prototype]"})}),"\n",(0,d.jsx)(i.p,{children:(0,d.jsx)(i.code,{children:"int32_t sp_module_unbind(void *src, int32_t src_type, void *dst, int32_t dst_type)"})}),"\n",(0,d.jsx)(i.p,{children:(0,d.jsx)(i.strong,{children:"[Description]"})}),"\n",(0,d.jsx)(i.p,{children:"This interface completes the unbinding of two modules that have already been bound. The unbinding needs to be completed before the module exits."}),"\n",(0,d.jsx)(i.p,{children:(0,d.jsx)(i.strong,{children:"\u3010Parameters\u3011"})}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"src"}),": Object pointer of the data source module (obtained by calling various module initialization interfaces)"]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"src_type"}),": Type of the source data module, supports ",(0,d.jsx)(i.code,{children:"SP_MTYPE_VIO"})," and ",(0,d.jsx)(i.code,{children:"SP_MTYPE_DECODER"})]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"dst"}),": Object pointer of the target module (obtained by calling various module initialization interfaces)"]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"dst_type"}),": Type of the target data module, supports ",(0,d.jsx)(i.code,{children:"SP_MTYPE_ENCODER"})," and ",(0,d.jsx)(i.code,{children:"SP_MTYPE_DISPLAY"})]}),"\n"]}),"\n",(0,d.jsx)(i.p,{children:(0,d.jsx)(i.strong,{children:"\u3010Return\u3011"})}),"\n",(0,d.jsx)(i.p,{children:"Returns 0 on success, returns other values on failure."})]})}function h(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,d.jsx)(i,{...e,children:(0,d.jsx)(a,{...e})}):a(e)}}}]);